[
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "SearchFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "SearchFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "importPath": "rest_framework.pagination",
        "description": "rest_framework.pagination",
        "isExtraImport": true,
        "detail": "rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "SymptomAutocompleteSerializer",
        "importPath": "others.serializers",
        "description": "others.serializers",
        "isExtraImport": true,
        "detail": "others.serializers",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patients.models",
        "description": "patients.models",
        "isExtraImport": true,
        "detail": "patients.models",
        "documentation": {}
    },
    {
        "label": "Adult",
        "importPath": "patients.models",
        "description": "patients.models",
        "isExtraImport": true,
        "detail": "patients.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patients.models",
        "description": "patients.models",
        "isExtraImport": true,
        "detail": "patients.models",
        "documentation": {}
    },
    {
        "label": "Adult",
        "importPath": "patients.models",
        "description": "patients.models",
        "isExtraImport": true,
        "detail": "patients.models",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "patients.models",
        "description": "patients.models",
        "isExtraImport": true,
        "detail": "patients.models",
        "documentation": {}
    },
    {
        "label": "Adult",
        "importPath": "patients.models",
        "description": "patients.models",
        "isExtraImport": true,
        "detail": "patients.models",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "PatientSerializer",
        "importPath": "patients.serializers",
        "description": "patients.serializers",
        "isExtraImport": true,
        "detail": "patients.serializers",
        "documentation": {}
    },
    {
        "label": "AdultSerializer",
        "importPath": "patients.serializers",
        "description": "patients.serializers",
        "isExtraImport": true,
        "detail": "patients.serializers",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "get_runner",
        "importPath": "django.test.utils",
        "description": "django.test.utils",
        "isExtraImport": true,
        "detail": "django.test.utils",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "AccountsConfig",
        "kind": 6,
        "importPath": "backend.accounts.apps",
        "description": "backend.accounts.apps",
        "peekOfCode": "class AccountsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"accounts\"",
        "detail": "backend.accounts.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.accounts.urls",
        "description": "backend.accounts.urls",
        "peekOfCode": "urlpatterns = [\n    path('token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    # path('', include(router.urls)),\n]",
        "detail": "backend.accounts.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.asgi",
        "description": "backend.bedaya_medical_system.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "backend.bedaya_medical_system.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = config('SECRET_KEY', default='django-insecure-gyb^#3j&e^(oq@w!&#n@q-jv4g721peb0hfae+u6@pvxq7)=($')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', default=True, cast=bool)\nALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')\n# Application definition\nINSTALLED_APPS = [",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "SECRET_KEY = config('SECRET_KEY', default='django-insecure-gyb^#3j&e^(oq@w!&#n@q-jv4g721peb0hfae+u6@pvxq7)=($')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', default=True, cast=bool)\nALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "DEBUG = config('DEBUG', default=True, cast=bool)\nALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    # Third party apps",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    # Third party apps\n    \"rest_framework\",\n    \"corsheaders\",",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.middleware.security.SecurityMiddleware\",\n    \"whitenoise.middleware.WhiteNoiseMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "ROOT_URLCONF = \"bedaya_medical_system.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "WSGI_APPLICATION = \"bedaya_medical_system.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Django REST Framework",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Django REST Framework\nREST_FRAMEWORK = {",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Django REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Django REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        # 'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Django REST Framework\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        # 'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        # 'rest_framework.permissions.IsAuthenticated',\n    ],\n    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        # 'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        # 'rest_framework.permissions.IsAuthenticated',\n    ],\n    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 20,\n    'PAGE_SIZE_QUERY_PARAM': 'page_size',",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', default='http://localhost:3000,http://127.0.0.1:3000').split(',')\n# JWT Settings\nfrom datetime import timedelta\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),\n    'ROTATE_REFRESH_TOKENS': True,\n}\n# Static files\nSTATIC_ROOT = BASE_DIR / 'staticfiles'",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),\n    'ROTATE_REFRESH_TOKENS': True,\n}\n# Static files\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# Media files\nMEDIA_URL = '/media/'",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_STORAGE",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.settings",
        "description": "backend.bedaya_medical_system.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / 'media'",
        "detail": "backend.bedaya_medical_system.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.urls",
        "description": "backend.bedaya_medical_system.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"api/auth/\", include(\"accounts.urls\")),\n    path(\"api/patients/\", include(\"patients.urls\")),\n    path(\"api/\", include(\"others.urls\")),\n]\n# Serve media files in development\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "backend.bedaya_medical_system.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.bedaya_medical_system.wsgi",
        "description": "backend.bedaya_medical_system.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "backend.bedaya_medical_system.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.others.migrations.0001_initial",
        "description": "backend.others.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = []\n    operations = [\n        migrations.CreateModel(\n            name=\"ClinicModel\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(",
        "detail": "backend.others.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "FamilyHistoryAdmin",
        "kind": 6,
        "importPath": "backend.others.admin",
        "description": "backend.others.admin",
        "peekOfCode": "class FamilyHistoryAdmin(admin.ModelAdmin):\n    list_display = ['name', 'created_on', 'updated_on']\n    list_filter = ['created_on', 'updated_on']\n    search_fields = ['name']\n    readonly_fields = ['id', 'created_on', 'updated_on']\n@admin.register(MedicalModel)\nclass MedicalAdmin(admin.ModelAdmin):\n    list_display = ['name', 'created_on', 'updated_on']\n    list_filter = ['created_on', 'updated_on']\n    search_fields = ['name']",
        "detail": "backend.others.admin",
        "documentation": {}
    },
    {
        "label": "MedicalAdmin",
        "kind": 6,
        "importPath": "backend.others.admin",
        "description": "backend.others.admin",
        "peekOfCode": "class MedicalAdmin(admin.ModelAdmin):\n    list_display = ['name', 'created_on', 'updated_on']\n    list_filter = ['created_on', 'updated_on']\n    search_fields = ['name']\n    readonly_fields = ['id', 'created_on', 'updated_on']\n@admin.register(CyanosisModel)\nclass CyanosisAdmin(admin.ModelAdmin):\n    list_display = ['name', 'created_on', 'updated_on']\n    list_filter = ['created_on', 'updated_on']\n    search_fields = ['name']",
        "detail": "backend.others.admin",
        "documentation": {}
    },
    {
        "label": "CyanosisAdmin",
        "kind": 6,
        "importPath": "backend.others.admin",
        "description": "backend.others.admin",
        "peekOfCode": "class CyanosisAdmin(admin.ModelAdmin):\n    list_display = ['name', 'created_on', 'updated_on']\n    list_filter = ['created_on', 'updated_on']\n    search_fields = ['name']\n    readonly_fields = ['id', 'created_on', 'updated_on']\n@admin.register(DrugModel)\nclass DrugAdmin(admin.ModelAdmin):\n    list_display = ['name', 'created_on', 'updated_on']\n    list_filter = ['created_on', 'updated_on']\n    search_fields = ['name']",
        "detail": "backend.others.admin",
        "documentation": {}
    },
    {
        "label": "DrugAdmin",
        "kind": 6,
        "importPath": "backend.others.admin",
        "description": "backend.others.admin",
        "peekOfCode": "class DrugAdmin(admin.ModelAdmin):\n    list_display = ['name', 'created_on', 'updated_on']\n    list_filter = ['created_on', 'updated_on']\n    search_fields = ['name']\n    readonly_fields = ['id', 'created_on', 'updated_on']\n@admin.register(ClinicModel)\nclass ClinicAdmin(admin.ModelAdmin):\n    list_display = ['name', 'description']\n    search_fields = ['name', 'description']\n@admin.register(SymptomModel)",
        "detail": "backend.others.admin",
        "documentation": {}
    },
    {
        "label": "ClinicAdmin",
        "kind": 6,
        "importPath": "backend.others.admin",
        "description": "backend.others.admin",
        "peekOfCode": "class ClinicAdmin(admin.ModelAdmin):\n    list_display = ['name', 'description']\n    search_fields = ['name', 'description']\n@admin.register(SymptomModel)\nclass SymptomAdmin(admin.ModelAdmin):\n    list_display = ['name', 'clinic', 'created_on', 'updated_on']\n    list_filter = ['clinic', 'created_on', 'updated_on']\n    search_fields = ['name', 'description', 'clinic__name']\n    readonly_fields = ['id', 'created_on', 'updated_on']\n    list_select_related = ['clinic']",
        "detail": "backend.others.admin",
        "documentation": {}
    },
    {
        "label": "SymptomAdmin",
        "kind": 6,
        "importPath": "backend.others.admin",
        "description": "backend.others.admin",
        "peekOfCode": "class SymptomAdmin(admin.ModelAdmin):\n    list_display = ['name', 'clinic', 'created_on', 'updated_on']\n    list_filter = ['clinic', 'created_on', 'updated_on']\n    search_fields = ['name', 'description', 'clinic__name']\n    readonly_fields = ['id', 'created_on', 'updated_on']\n    list_select_related = ['clinic']",
        "detail": "backend.others.admin",
        "documentation": {}
    },
    {
        "label": "OthersConfig",
        "kind": 6,
        "importPath": "backend.others.apps",
        "description": "backend.others.apps",
        "peekOfCode": "class OthersConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"others\"",
        "detail": "backend.others.apps",
        "documentation": {}
    },
    {
        "label": "FamilyHistoryModel",
        "kind": 6,
        "importPath": "backend.others.models",
        "description": "backend.others.models",
        "peekOfCode": "class FamilyHistoryModel(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    created_on = models.DateTimeField(auto_now_add=True, null=True, blank=True)\n    updated_on = models.DateTimeField(auto_now=True, null=True, blank=True)\n    name = models.CharField(max_length=255)\n    def __str__(self):\n        return self.name\nclass MedicalModel(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    created_on = models.DateTimeField(auto_now_add=True, null=True, blank=True)",
        "detail": "backend.others.models",
        "documentation": {}
    },
    {
        "label": "MedicalModel",
        "kind": 6,
        "importPath": "backend.others.models",
        "description": "backend.others.models",
        "peekOfCode": "class MedicalModel(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    created_on = models.DateTimeField(auto_now_add=True, null=True, blank=True)\n    updated_on = models.DateTimeField(auto_now=True, null=True, blank=True)\n    name = models.CharField(max_length=255)\n    def __str__(self):\n        return self.name\nclass CyanosisModel(models.Model):\n    \"\"\"Model definition for Cyanosis.\"\"\"\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)",
        "detail": "backend.others.models",
        "documentation": {}
    },
    {
        "label": "CyanosisModel",
        "kind": 6,
        "importPath": "backend.others.models",
        "description": "backend.others.models",
        "peekOfCode": "class CyanosisModel(models.Model):\n    \"\"\"Model definition for Cyanosis.\"\"\"\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    created_on = models.DateTimeField(auto_now_add=True, null=True, blank=True)\n    updated_on = models.DateTimeField(auto_now=True, null=True, blank=True)\n    name = models.CharField(max_length=50)\n    class Meta:\n        \"\"\"Meta definition for Cyanosis.\"\"\"\n        verbose_name = 'Cyanosis'\n        verbose_name_plural = 'Cyanoses'",
        "detail": "backend.others.models",
        "documentation": {}
    },
    {
        "label": "DrugModel",
        "kind": 6,
        "importPath": "backend.others.models",
        "description": "backend.others.models",
        "peekOfCode": "class DrugModel(models.Model):\n    \"\"\"Model definition for Drug.\"\"\"\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    created_on = models.DateTimeField(auto_now_add=True, null=True, blank=True)\n    updated_on = models.DateTimeField(auto_now=True, null=True, blank=True)\n    name = models.CharField(max_length=50)\n    class Meta:\n        \"\"\"Meta definition for Drug.\"\"\"\n        verbose_name = _('Drug')\n        verbose_name_plural = _('Drugs')",
        "detail": "backend.others.models",
        "documentation": {}
    },
    {
        "label": "ClinicModel",
        "kind": 6,
        "importPath": "backend.others.models",
        "description": "backend.others.models",
        "peekOfCode": "class ClinicModel(models.Model):\n    \"\"\"Model definition for Clinic.\"\"\"\n    name = models.CharField(\"Clinic Name\", max_length=255)\n    description = models.TextField(\"Clinic Descriptions\", null=True, blank=True)\n    class Meta:\n        \"\"\"Meta definition for Clinic.\"\"\"\n        verbose_name = 'Clinic'\n        verbose_name_plural = 'Clinics'\n    def __str__(self) -> str:\n        return f\"{self.name}\"",
        "detail": "backend.others.models",
        "documentation": {}
    },
    {
        "label": "SymptomModel",
        "kind": 6,
        "importPath": "backend.others.models",
        "description": "backend.others.models",
        "peekOfCode": "class SymptomModel(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(_(\"Symptom Name\"), max_length=255)\n    description = models.TextField(_(\"Symptom Description\"), null=True, blank=True)\n    clinic = models.ForeignKey(\"ClinicModel\", verbose_name=_(\"Clinic\"), on_delete=models.PROTECT)\n    created_on = models.DateTimeField(auto_now_add=True, null=True, blank=True)\n    updated_on = models.DateTimeField(auto_now=True, null=True, blank=True)\n    class Meta:\n        verbose_name = _(\"Symptom\")\n        verbose_name_plural = _(\"Symptoms\")",
        "detail": "backend.others.models",
        "documentation": {}
    },
    {
        "label": "FamilyHistorySerializer",
        "kind": 6,
        "importPath": "backend.others.serializers",
        "description": "backend.others.serializers",
        "peekOfCode": "class FamilyHistorySerializer(serializers.ModelSerializer):\n    \"\"\"Full serializer for FamilyHistoryModel\"\"\"\n    class Meta:\n        model = FamilyHistoryModel\n        fields = \"__all__\"\n        read_only_fields = ['id', 'created_on', 'updated_on']\n    def validate_name(self, value):\n        \"\"\"Validate name\"\"\"\n        if not value or not value.strip():\n            raise serializers.ValidationError(\"Name is required.\")",
        "detail": "backend.others.serializers",
        "documentation": {}
    },
    {
        "label": "FamilyHistoryAutocompleteSerializer",
        "kind": 6,
        "importPath": "backend.others.serializers",
        "description": "backend.others.serializers",
        "peekOfCode": "class FamilyHistoryAutocompleteSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for autocomplete fields - minimal data\"\"\"\n    class Meta:\n        model = FamilyHistoryModel\n        fields = ['id', 'name']\nclass MedicalSerializer(serializers.ModelSerializer):\n    \"\"\"Full serializer for MedicalModel\"\"\"\n    class Meta:\n        model = MedicalModel\n        fields = \"__all__\"",
        "detail": "backend.others.serializers",
        "documentation": {}
    },
    {
        "label": "MedicalSerializer",
        "kind": 6,
        "importPath": "backend.others.serializers",
        "description": "backend.others.serializers",
        "peekOfCode": "class MedicalSerializer(serializers.ModelSerializer):\n    \"\"\"Full serializer for MedicalModel\"\"\"\n    class Meta:\n        model = MedicalModel\n        fields = \"__all__\"\n        read_only_fields = ['id', 'created_on', 'updated_on']\n    def validate_name(self, value):\n        \"\"\"Validate name\"\"\"\n        if not value or not value.strip():\n            raise serializers.ValidationError(\"Name is required.\")",
        "detail": "backend.others.serializers",
        "documentation": {}
    },
    {
        "label": "MedicalAutocompleteSerializer",
        "kind": 6,
        "importPath": "backend.others.serializers",
        "description": "backend.others.serializers",
        "peekOfCode": "class MedicalAutocompleteSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for autocomplete fields - minimal data\"\"\"\n    class Meta:\n        model = MedicalModel\n        fields = ['id', 'name']\nclass CyanosisSerializer(serializers.ModelSerializer):\n    \"\"\"Full serializer for CyanosisModel\"\"\"\n    class Meta:\n        model = CyanosisModel\n        fields = \"__all__\"",
        "detail": "backend.others.serializers",
        "documentation": {}
    },
    {
        "label": "CyanosisSerializer",
        "kind": 6,
        "importPath": "backend.others.serializers",
        "description": "backend.others.serializers",
        "peekOfCode": "class CyanosisSerializer(serializers.ModelSerializer):\n    \"\"\"Full serializer for CyanosisModel\"\"\"\n    class Meta:\n        model = CyanosisModel\n        fields = \"__all__\"\n        read_only_fields = ['id', 'created_on', 'updated_on']\n    def validate_name(self, value):\n        \"\"\"Validate name\"\"\"\n        if not value or not value.strip():\n            raise serializers.ValidationError(\"Name is required.\")",
        "detail": "backend.others.serializers",
        "documentation": {}
    },
    {
        "label": "CyanosisAutocompleteSerializer",
        "kind": 6,
        "importPath": "backend.others.serializers",
        "description": "backend.others.serializers",
        "peekOfCode": "class CyanosisAutocompleteSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for autocomplete fields - minimal data\"\"\"\n    class Meta:\n        model = CyanosisModel\n        fields = ['id', 'name']\nclass DrugSerializer(serializers.ModelSerializer):\n    \"\"\"Full serializer for DrugModel\"\"\"\n    class Meta:\n        model = DrugModel\n        fields = \"__all__\"",
        "detail": "backend.others.serializers",
        "documentation": {}
    },
    {
        "label": "DrugSerializer",
        "kind": 6,
        "importPath": "backend.others.serializers",
        "description": "backend.others.serializers",
        "peekOfCode": "class DrugSerializer(serializers.ModelSerializer):\n    \"\"\"Full serializer for DrugModel\"\"\"\n    class Meta:\n        model = DrugModel\n        fields = \"__all__\"\n        read_only_fields = ['id', 'created_on', 'updated_on']\n    def validate_name(self, value):\n        \"\"\"Validate name\"\"\"\n        if not value or not value.strip():\n            raise serializers.ValidationError(\"Name is required.\")",
        "detail": "backend.others.serializers",
        "documentation": {}
    },
    {
        "label": "DrugAutocompleteSerializer",
        "kind": 6,
        "importPath": "backend.others.serializers",
        "description": "backend.others.serializers",
        "peekOfCode": "class DrugAutocompleteSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for autocomplete fields - minimal data\"\"\"\n    class Meta:\n        model = DrugModel\n        fields = ['id', 'name']\nclass ClinicSerializer(serializers.ModelSerializer):\n    \"\"\"Full serializer for ClinicModel\"\"\"\n    class Meta:\n        model = ClinicModel\n        fields = \"__all__\"",
        "detail": "backend.others.serializers",
        "documentation": {}
    },
    {
        "label": "ClinicSerializer",
        "kind": 6,
        "importPath": "backend.others.serializers",
        "description": "backend.others.serializers",
        "peekOfCode": "class ClinicSerializer(serializers.ModelSerializer):\n    \"\"\"Full serializer for ClinicModel\"\"\"\n    class Meta:\n        model = ClinicModel\n        fields = \"__all__\"\n    def validate_name(self, value):\n        \"\"\"Validate name\"\"\"\n        if not value or not value.strip():\n            raise serializers.ValidationError(\"Name is required.\")\n        if len(value.strip()) < 2:",
        "detail": "backend.others.serializers",
        "documentation": {}
    },
    {
        "label": "ClinicAutocompleteSerializer",
        "kind": 6,
        "importPath": "backend.others.serializers",
        "description": "backend.others.serializers",
        "peekOfCode": "class ClinicAutocompleteSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for autocomplete fields - minimal data\"\"\"\n    class Meta:\n        model = ClinicModel\n        fields = ['id', 'name']\nclass SymptomSerializer(serializers.ModelSerializer):\n    \"\"\"Full serializer for SymptomModel\"\"\"\n    clinic_name = serializers.CharField(source='clinic.name', read_only=True)\n    class Meta:\n        model = SymptomModel",
        "detail": "backend.others.serializers",
        "documentation": {}
    },
    {
        "label": "SymptomSerializer",
        "kind": 6,
        "importPath": "backend.others.serializers",
        "description": "backend.others.serializers",
        "peekOfCode": "class SymptomSerializer(serializers.ModelSerializer):\n    \"\"\"Full serializer for SymptomModel\"\"\"\n    clinic_name = serializers.CharField(source='clinic.name', read_only=True)\n    class Meta:\n        model = SymptomModel\n        fields = \"__all__\"\n        read_only_fields = ['id', 'created_on', 'updated_on']\n    def validate_name(self, value):\n        \"\"\"Validate name\"\"\"\n        if not value or not value.strip():",
        "detail": "backend.others.serializers",
        "documentation": {}
    },
    {
        "label": "SymptomAutocompleteSerializer",
        "kind": 6,
        "importPath": "backend.others.serializers",
        "description": "backend.others.serializers",
        "peekOfCode": "class SymptomAutocompleteSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for autocomplete fields - minimal data\"\"\"\n    value = serializers.CharField(source='id', read_only=True)\n    label = serializers.CharField(source='name', read_only=True)\n    class Meta:\n        model = SymptomModel\n        fields = ['value', 'label']",
        "detail": "backend.others.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.others.urls",
        "description": "backend.others.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'family-history', FamilyHistoryViewSet, basename='family-history')\nrouter.register(r'medical', MedicalViewSet, basename='medical')\nrouter.register(r'cyanosis', CyanosisViewSet, basename='cyanosis')\nrouter.register(r'drugs', DrugViewSet, basename='drugs')\nrouter.register(r'clinics', ClinicViewSet, basename='clinics')\nrouter.register(r'symptoms', SymptomViewSet, basename='symptoms')\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "backend.others.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.others.urls",
        "description": "backend.others.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "backend.others.urls",
        "documentation": {}
    },
    {
        "label": "FamilyHistoryViewSet",
        "kind": 6,
        "importPath": "backend.others.views",
        "description": "backend.others.views",
        "peekOfCode": "class FamilyHistoryViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    ViewSet for FamilyHistoryModel with autocomplete functionality\n    \"\"\"\n    queryset = FamilyHistoryModel.objects.all()\n    serializer_class = FamilyHistorySerializer\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    search_fields = ['name']\n    ordering_fields = ['name', 'created_on', 'updated_on']\n    ordering = ['-created_on']",
        "detail": "backend.others.views",
        "documentation": {}
    },
    {
        "label": "MedicalViewSet",
        "kind": 6,
        "importPath": "backend.others.views",
        "description": "backend.others.views",
        "peekOfCode": "class MedicalViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    ViewSet for MedicalModel with autocomplete functionality\n    \"\"\"\n    queryset = MedicalModel.objects.all()\n    serializer_class = MedicalSerializer\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    search_fields = ['name']\n    ordering_fields = ['name', 'created_on', 'updated_on']\n    ordering = ['-created_on']",
        "detail": "backend.others.views",
        "documentation": {}
    },
    {
        "label": "CyanosisViewSet",
        "kind": 6,
        "importPath": "backend.others.views",
        "description": "backend.others.views",
        "peekOfCode": "class CyanosisViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    ViewSet for CyanosisModel with autocomplete functionality\n    \"\"\"\n    queryset = CyanosisModel.objects.all()\n    serializer_class = CyanosisSerializer\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    search_fields = ['name']\n    ordering_fields = ['name', 'created_on', 'updated_on']\n    ordering = ['-created_on']",
        "detail": "backend.others.views",
        "documentation": {}
    },
    {
        "label": "DrugViewSet",
        "kind": 6,
        "importPath": "backend.others.views",
        "description": "backend.others.views",
        "peekOfCode": "class DrugViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    ViewSet for DrugModel with autocomplete functionality\n    \"\"\"\n    queryset = DrugModel.objects.all()\n    serializer_class = DrugSerializer\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    search_fields = ['name']\n    ordering_fields = ['name', 'created_on', 'updated_on']\n    ordering = ['-created_on']",
        "detail": "backend.others.views",
        "documentation": {}
    },
    {
        "label": "ClinicViewSet",
        "kind": 6,
        "importPath": "backend.others.views",
        "description": "backend.others.views",
        "peekOfCode": "class ClinicViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    ViewSet for ClinicModel with autocomplete functionality\n    \"\"\"\n    queryset = ClinicModel.objects.all()\n    serializer_class = ClinicSerializer\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    search_fields = ['name', 'description']\n    ordering_fields = ['name']\n    ordering = ['name']",
        "detail": "backend.others.views",
        "documentation": {}
    },
    {
        "label": "SymptomViewSet",
        "kind": 6,
        "importPath": "backend.others.views",
        "description": "backend.others.views",
        "peekOfCode": "class SymptomViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    ViewSet for SymptomModel with autocomplete functionality\n    \"\"\"\n    queryset = SymptomModel.objects.select_related('clinic').all()\n    serializer_class = SymptomSerializer\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    search_fields = ['name', 'description', 'clinic__name']\n    ordering_fields = ['name', 'clinic__name', 'created_on', 'updated_on']\n    ordering = ['-created_on']",
        "detail": "backend.others.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.patients.migrations.0001_initial",
        "description": "backend.patients.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        (\"others\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Patient\",\n            fields=[\n                (",
        "detail": "backend.patients.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.patients.migrations.0002_alter_adult_allergy_alter_adult_contraception_and_more",
        "description": "backend.patients.migrations.0002_alter_adult_allergy_alter_adult_contraception_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"patients\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"adult\",\n            name=\"allergy\",\n            field=models.CharField(\n                choices=[(\"yes\", \"Yes\"), (\"no\", \"No\")],",
        "detail": "backend.patients.migrations.0002_alter_adult_allergy_alter_adult_contraception_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.patients.migrations.0003_remove_adult_age_patient_age",
        "description": "backend.patients.migrations.0003_remove_adult_age_patient_age",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"patients\", \"0002_alter_adult_allergy_alter_adult_contraception_and_more\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"adult\",\n            name=\"age\",\n        ),\n        migrations.AddField(",
        "detail": "backend.patients.migrations.0003_remove_adult_age_patient_age",
        "documentation": {}
    },
    {
        "label": "PatientAdmin",
        "kind": 6,
        "importPath": "backend.patients.admin",
        "description": "backend.patients.admin",
        "peekOfCode": "class PatientAdmin(admin.ModelAdmin):\n    list_display = ['id', 'name', 'code', 'patient_type', 'gender', 'created_at']\n    list_filter = ['created_at', 'gender', 'patient_type']\n    search_fields = ['name', 'mobile_number', 'code']\n    readonly_fields = ['id', 'created_at', 'updated_at']\n    fieldsets = (\n        ('Patient Information', {\n            'fields': ('patient_type', 'code', 'house_number', 'name', 'gender', 'mobile_number')\n        }),\n        ('Timestamps', {",
        "detail": "backend.patients.admin",
        "documentation": {}
    },
    {
        "label": "AdultAdmin",
        "kind": 6,
        "importPath": "backend.patients.admin",
        "description": "backend.patients.admin",
        "peekOfCode": "class AdultAdmin(admin.ModelAdmin):\n    list_display = ['id', 'name', 'code', 'age', 'occupation', 'marital_status', 'gender', 'created_at']\n    list_filter = ['created_at', 'gender', 'marital_status', 'education_level', 'smoking']\n    search_fields = ['name', 'mobile_number', 'code', 'occupation']\n    readonly_fields = ['id', 'created_at', 'updated_at']\n    fieldsets = (\n        ('Patient Information', {\n            'fields': ('patient_type', 'code', 'house_number', 'name', 'gender', 'mobile_number')\n        }),\n        ('Adult Information', {",
        "detail": "backend.patients.admin",
        "documentation": {}
    },
    {
        "label": "PediatricAdmin",
        "kind": 6,
        "importPath": "backend.patients.admin",
        "description": "backend.patients.admin",
        "peekOfCode": "class PediatricAdmin(admin.ModelAdmin):\n    list_display = ['id', 'name', 'code', 'gender', 'created_at']\n    list_filter = ['created_at', 'gender']\n    search_fields = ['name', 'mobile_number', 'code']\n    readonly_fields = ['id', 'created_at', 'updated_at']\n    fieldsets = (\n        ('Patient Information', {\n            'fields': ('patient_type', 'code', 'house_number', 'name', 'gender', 'mobile_number')\n        }),\n        ('Timestamps', {",
        "detail": "backend.patients.admin",
        "documentation": {}
    },
    {
        "label": "PatientsConfig",
        "kind": 6,
        "importPath": "backend.patients.apps",
        "description": "backend.patients.apps",
        "peekOfCode": "class PatientsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"patients\"",
        "detail": "backend.patients.apps",
        "documentation": {}
    },
    {
        "label": "Patient",
        "kind": 6,
        "importPath": "backend.patients.models",
        "description": "backend.patients.models",
        "peekOfCode": "class Patient(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    patient_type = models.CharField(max_length=20, choices=[('adult', 'Adult'), ('pediatric', 'Pediatric')], default='adult')\n    code = models.CharField(\"Code\", max_length=255, unique=True, default='')\n    house_number = models.CharField(\"House Number\", max_length=255, default='')\n    name = models.CharField(max_length=200, default='')\n    gender = models.CharField(max_length=10, choices=[('male', 'Male'), ('female', 'Female')], default='male')\n    mobile_number = models.CharField(max_length=15, default='')\n    age = models.IntegerField(default=0)\n    created_at = models.DateTimeField(auto_now_add=True)",
        "detail": "backend.patients.models",
        "documentation": {}
    },
    {
        "label": "Adult",
        "kind": 6,
        "importPath": "backend.patients.models",
        "description": "backend.patients.models",
        "peekOfCode": "class Adult(Patient):\n    occupation = models.CharField(max_length=255, default='')\n    marital_status = models.CharField(max_length=255, choices=[('married', 'Married'), ('single', 'Single'), ('divorced', 'Divorced'), ('widowed', 'Widowed')], default='single')\n    children_number = models.IntegerField(default=0)\n    age_of_the_youngest = models.IntegerField(default=0)\n    education_level = models.CharField(max_length=255, choices=EDUCATION_LEVELS, default='primary')\n    # Hapits of medical importance\n    smoking = models.CharField(\"Smoking\", max_length=3, choices=[('yes', 'Yes'), ('no', 'No')], default='no')\n    smoking_rate = models.CharField(\"Rate\", max_length=255, null=True, blank=True)\n    smoking_type = models.CharField(\"Type\", max_length=255, null=True, blank=True)",
        "detail": "backend.patients.models",
        "documentation": {}
    },
    {
        "label": "Pediatric",
        "kind": 6,
        "importPath": "backend.patients.models",
        "description": "backend.patients.models",
        "peekOfCode": "class Pediatric(Patient):\n    pass",
        "detail": "backend.patients.models",
        "documentation": {}
    },
    {
        "label": "EDUCATION_LEVELS",
        "kind": 5,
        "importPath": "backend.patients.models",
        "description": "backend.patients.models",
        "peekOfCode": "EDUCATION_LEVELS = [\n    ('illiterate', 'Illiterate'),\n    ('read_write', 'Read and Write'),\n    ('primary', 'Primary'),\n    ('preparatory', 'Preparatory'),\n    ('secondary', 'Secondary'),\n    ('university', 'University'),\n    ('postgraduate', 'Postgraduate'),\n]\nMENSTRUATIONS = [",
        "detail": "backend.patients.models",
        "documentation": {}
    },
    {
        "label": "MENSTRUATIONS",
        "kind": 5,
        "importPath": "backend.patients.models",
        "description": "backend.patients.models",
        "peekOfCode": "MENSTRUATIONS = [\n    ('regular', 'Regular'),\n    ('irregular', 'Irregular'),\n    ('menopause', 'Menopause'),\n]\nCONTRACEPTION_METHODS = [\n    ('implant', 'Implant'),\n    ('iud', 'IUD'),\n    ('coc', 'COC'),\n    ('other', 'Other'),",
        "detail": "backend.patients.models",
        "documentation": {}
    },
    {
        "label": "CONTRACEPTION_METHODS",
        "kind": 5,
        "importPath": "backend.patients.models",
        "description": "backend.patients.models",
        "peekOfCode": "CONTRACEPTION_METHODS = [\n    ('implant', 'Implant'),\n    ('iud', 'IUD'),\n    ('coc', 'COC'),\n    ('other', 'Other'),\n]\nBLOOD_TRANSFUSIONS = [\n    ('no', 'No'),\n    ('occasional', 'Occasional'),\n    ('regular', 'Regular'),",
        "detail": "backend.patients.models",
        "documentation": {}
    },
    {
        "label": "BLOOD_TRANSFUSIONS",
        "kind": 5,
        "importPath": "backend.patients.models",
        "description": "backend.patients.models",
        "peekOfCode": "BLOOD_TRANSFUSIONS = [\n    ('no', 'No'),\n    ('occasional', 'Occasional'),\n    ('regular', 'Regular'),\n]\nSURGICALS = [\n    ('icu', 'ICU'),\n    ('operation', 'Operation'),\n]\nclass Patient(models.Model):",
        "detail": "backend.patients.models",
        "documentation": {}
    },
    {
        "label": "SURGICALS",
        "kind": 5,
        "importPath": "backend.patients.models",
        "description": "backend.patients.models",
        "peekOfCode": "SURGICALS = [\n    ('icu', 'ICU'),\n    ('operation', 'Operation'),\n]\nclass Patient(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    patient_type = models.CharField(max_length=20, choices=[('adult', 'Adult'), ('pediatric', 'Pediatric')], default='adult')\n    code = models.CharField(\"Code\", max_length=255, unique=True, default='')\n    house_number = models.CharField(\"House Number\", max_length=255, default='')\n    name = models.CharField(max_length=200, default='')",
        "detail": "backend.patients.models",
        "documentation": {}
    },
    {
        "label": "CustomPageNumberPagination",
        "kind": 6,
        "importPath": "backend.patients.pagination",
        "description": "backend.patients.pagination",
        "peekOfCode": "class CustomPageNumberPagination(PageNumberPagination):\n    \"\"\"\n    Custom pagination class that provides detailed pagination information\n    \"\"\"\n    page_size = 20\n    page_size_query_param = 'page_size'\n    max_page_size = 100\n    def get_paginated_response(self, data):\n        return Response({\n            'count': self.page.paginator.count,",
        "detail": "backend.patients.pagination",
        "documentation": {}
    },
    {
        "label": "PatientSerializer",
        "kind": 6,
        "importPath": "backend.patients.serializers",
        "description": "backend.patients.serializers",
        "peekOfCode": "class PatientSerializer(serializers.ModelSerializer):\n    \"\"\"Full serializer for Patient model\"\"\"\n    class Meta:\n        model = Patient\n        fields = \"__all__\"\n        read_only_fields = ['id', 'created_at', 'updated_at']\n    def validate_age(self, value):\n        \"\"\"Validate age\"\"\"\n        if value < 0:\n            raise serializers.ValidationError(\"Age cannot be negative.\")",
        "detail": "backend.patients.serializers",
        "documentation": {}
    },
    {
        "label": "PatientAutocompleteSerializer",
        "kind": 6,
        "importPath": "backend.patients.serializers",
        "description": "backend.patients.serializers",
        "peekOfCode": "class PatientAutocompleteSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for autocomplete fields - minimal data\"\"\"\n    class Meta:\n        model = Patient\n        fields = ['id', 'name', 'mobile_number']\nclass AdultSerializer(serializers.ModelSerializer):\n    \"\"\"Full serializer for Adult model\"\"\"\n    complaints = serializers.SerializerMethodField()\n    class Meta:\n        model = Adult",
        "detail": "backend.patients.serializers",
        "documentation": {}
    },
    {
        "label": "AdultSerializer",
        "kind": 6,
        "importPath": "backend.patients.serializers",
        "description": "backend.patients.serializers",
        "peekOfCode": "class AdultSerializer(serializers.ModelSerializer):\n    \"\"\"Full serializer for Adult model\"\"\"\n    complaints = serializers.SerializerMethodField()\n    class Meta:\n        model = Adult\n        fields = \"__all__\"\n        read_only_fields = ['id', 'created_at', 'updated_at']\n    def get_complaints(self, obj):\n        \"\"\"Return complaints as list of {value, label} objects\"\"\"\n        return [",
        "detail": "backend.patients.serializers",
        "documentation": {}
    },
    {
        "label": "AdultAutocompleteSerializer",
        "kind": 6,
        "importPath": "backend.patients.serializers",
        "description": "backend.patients.serializers",
        "peekOfCode": "class AdultAutocompleteSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for autocomplete fields - minimal data\"\"\"\n    complaints = serializers.SerializerMethodField()\n    class Meta:\n        model = Adult\n        fields = ['id', 'name', 'mobile_number', 'age', 'occupation', 'complaints']\n    def get_complaints(self, obj):\n        \"\"\"Return complaints as list of {value, label} objects\"\"\"\n        return [\n            {",
        "detail": "backend.patients.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.patients.urls",
        "description": "backend.patients.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'patients', PatientViewSet, basename='patients')\nrouter.register(r'adults', AdultViewSet, basename='adults')\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "backend.patients.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.patients.urls",
        "description": "backend.patients.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "backend.patients.urls",
        "documentation": {}
    },
    {
        "label": "PatientViewSet",
        "kind": 6,
        "importPath": "backend.patients.views",
        "description": "backend.patients.views",
        "peekOfCode": "class PatientViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    ViewSet for Patient model with autocomplete functionality\n    \"\"\"\n    queryset = Patient.objects.all()\n    serializer_class = PatientSerializer\n    # pagination_class = CustomPageNumberPagination\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    search_fields = ['name', 'mobile_number']\n    ordering_fields = ['name', 'created_at', 'updated_at']",
        "detail": "backend.patients.views",
        "documentation": {}
    },
    {
        "label": "AdultViewSet",
        "kind": 6,
        "importPath": "backend.patients.views",
        "description": "backend.patients.views",
        "peekOfCode": "class AdultViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    ViewSet for Adult model with autocomplete functionality\n    \"\"\"\n    queryset = Adult.objects.all()\n    serializer_class = AdultSerializer\n    # pagination_class = CustomPageNumberPagination\n    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]\n    search_fields = ['name', 'mobile_number', 'occupation']\n    ordering_fields = ['name', 'age', 'created_at', 'updated_at']",
        "detail": "backend.patients.views",
        "documentation": {}
    },
    {
        "label": "generate_phone_number",
        "kind": 2,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "def generate_phone_number() -> str:\n    \"\"\"Generate a random Egyptian phone number\"\"\"\n    prefixes = [\"010\", \"011\", \"012\", \"015\"]\n    prefix = random.choice(prefixes)\n    number = ''.join([str(random.randint(0, 9)) for _ in range(8)])\n    return f\"{prefix}{number}\"\ndef generate_patient_code() -> str:\n    \"\"\"Generate a unique patient code\"\"\"\n    return f\"PAT{random.randint(10000, 99999)}\"\ndef generate_house_number() -> str:",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "generate_patient_code",
        "kind": 2,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "def generate_patient_code() -> str:\n    \"\"\"Generate a unique patient code\"\"\"\n    return f\"PAT{random.randint(10000, 99999)}\"\ndef generate_house_number() -> str:\n    \"\"\"Generate a random house number\"\"\"\n    return f\"{random.randint(1, 999)}\"\ndef generate_random_date(start_date: datetime, end_date: datetime) -> str:\n    \"\"\"Generate a random date between start and end dates\"\"\"\n    time_between = end_date - start_date\n    days_between = time_between.days",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "generate_house_number",
        "kind": 2,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "def generate_house_number() -> str:\n    \"\"\"Generate a random house number\"\"\"\n    return f\"{random.randint(1, 999)}\"\ndef generate_random_date(start_date: datetime, end_date: datetime) -> str:\n    \"\"\"Generate a random date between start and end dates\"\"\"\n    time_between = end_date - start_date\n    days_between = time_between.days\n    random_days = random.randint(0, days_between)\n    random_date = start_date + timedelta(days=random_days)\n    return random_date.isoformat()",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "generate_random_date",
        "kind": 2,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "def generate_random_date(start_date: datetime, end_date: datetime) -> str:\n    \"\"\"Generate a random date between start and end dates\"\"\"\n    time_between = end_date - start_date\n    days_between = time_between.days\n    random_days = random.randint(0, days_between)\n    random_date = start_date + timedelta(days=random_days)\n    return random_date.isoformat()\ndef create_random_patient() -> Dict:\n    \"\"\"Create a random patient data\"\"\"\n    gender = random.choice(GENDERS)",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "create_random_patient",
        "kind": 2,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "def create_random_patient() -> Dict:\n    \"\"\"Create a random patient data\"\"\"\n    gender = random.choice(GENDERS)\n    patient_type = random.choice(PATIENT_TYPES)\n    # Base patient data\n    patient_data = {\n        \"patient_type\": patient_type,\n        \"code\": generate_patient_code(),\n        \"house_number\": generate_house_number(),\n        \"name\": f\"{random.choice(FIRST_NAMES)} {random.choice(LAST_NAMES)}\",",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "create_patients",
        "kind": 2,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "def create_patients(count: int = 10) -> List[Dict]:\n    \"\"\"Create multiple random patients\"\"\"\n    patients = []\n    for _ in range(count):\n        patients.append(create_random_patient())\n    return patients\ndef post_patient_to_api(patient_data: Dict) -> bool:\n    \"\"\"Post a single patient to the API\"\"\"\n    try:\n        response = requests.post(",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "post_patient_to_api",
        "kind": 2,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "def post_patient_to_api(patient_data: Dict) -> bool:\n    \"\"\"Post a single patient to the API\"\"\"\n    try:\n        response = requests.post(\n            PATIENTS_ENDPOINT,\n            json=patient_data,\n            headers={\"Content-Type\": \"application/json\"}\n        )\n        if response.status_code == 201:\n            print(f\"✅ Created patient: {patient_data['name']} ({patient_data['code']})\")",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "def main():\n    \"\"\"Main function to create random patients\"\"\"\n    print(\"🏥 Random Patient Generator\")\n    print(\"=\" * 50)\n    # Get number of patients to create\n    try:\n        count = int(input(\"How many patients do you want to create? (default: 10): \") or \"10\")\n    except ValueError:\n        count = 10\n    print(f\"\\n📝 Creating {count} random patients...\")",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "API_BASE_URL",
        "kind": 5,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "API_BASE_URL = \"http://localhost:8000/api\"\nPATIENTS_ENDPOINT = f\"{API_BASE_URL}/patients/patients/\"\n# Sample data for random generation\nFIRST_NAMES = [\n    \"Ahmed\", \"Mohamed\", \"Ali\", \"Omar\", \"Hassan\", \"Mahmoud\", \"Ibrahim\", \"Youssef\",\n    \"Fatima\", \"Aisha\", \"Khadija\", \"Zainab\", \"Mariam\", \"Amina\", \"Safiya\", \"Ruqayya\",\n    \"John\", \"Sarah\", \"Michael\", \"Emily\", \"David\", \"Jessica\", \"Robert\", \"Ashley\",\n    \"William\", \"Jennifer\", \"James\", \"Lisa\", \"Christopher\", \"Nancy\"\n]\nLAST_NAMES = [",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "PATIENTS_ENDPOINT",
        "kind": 5,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "PATIENTS_ENDPOINT = f\"{API_BASE_URL}/patients/patients/\"\n# Sample data for random generation\nFIRST_NAMES = [\n    \"Ahmed\", \"Mohamed\", \"Ali\", \"Omar\", \"Hassan\", \"Mahmoud\", \"Ibrahim\", \"Youssef\",\n    \"Fatima\", \"Aisha\", \"Khadija\", \"Zainab\", \"Mariam\", \"Amina\", \"Safiya\", \"Ruqayya\",\n    \"John\", \"Sarah\", \"Michael\", \"Emily\", \"David\", \"Jessica\", \"Robert\", \"Ashley\",\n    \"William\", \"Jennifer\", \"James\", \"Lisa\", \"Christopher\", \"Nancy\"\n]\nLAST_NAMES = [\n    \"Al-Rashid\", \"Al-Mahmoud\", \"Al-Hassan\", \"Al-Omar\", \"Al-Ahmad\", \"Al-Ibrahim\",",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "FIRST_NAMES",
        "kind": 5,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "FIRST_NAMES = [\n    \"Ahmed\", \"Mohamed\", \"Ali\", \"Omar\", \"Hassan\", \"Mahmoud\", \"Ibrahim\", \"Youssef\",\n    \"Fatima\", \"Aisha\", \"Khadija\", \"Zainab\", \"Mariam\", \"Amina\", \"Safiya\", \"Ruqayya\",\n    \"John\", \"Sarah\", \"Michael\", \"Emily\", \"David\", \"Jessica\", \"Robert\", \"Ashley\",\n    \"William\", \"Jennifer\", \"James\", \"Lisa\", \"Christopher\", \"Nancy\"\n]\nLAST_NAMES = [\n    \"Al-Rashid\", \"Al-Mahmoud\", \"Al-Hassan\", \"Al-Omar\", \"Al-Ahmad\", \"Al-Ibrahim\",\n    \"Al-Youssef\", \"Al-Mahmoud\", \"Al-Farouk\", \"Al-Nasser\", \"Al-Saad\", \"Al-Khalil\",\n    \"Smith\", \"Johnson\", \"Williams\", \"Brown\", \"Jones\", \"Garcia\", \"Miller\", \"Davis\",",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "LAST_NAMES",
        "kind": 5,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "LAST_NAMES = [\n    \"Al-Rashid\", \"Al-Mahmoud\", \"Al-Hassan\", \"Al-Omar\", \"Al-Ahmad\", \"Al-Ibrahim\",\n    \"Al-Youssef\", \"Al-Mahmoud\", \"Al-Farouk\", \"Al-Nasser\", \"Al-Saad\", \"Al-Khalil\",\n    \"Smith\", \"Johnson\", \"Williams\", \"Brown\", \"Jones\", \"Garcia\", \"Miller\", \"Davis\",\n    \"Rodriguez\", \"Martinez\", \"Hernandez\", \"Lopez\", \"Gonzalez\", \"Wilson\", \"Anderson\"\n]\nOCCUPATIONS = [\n    \"Doctor\", \"Engineer\", \"Teacher\", \"Lawyer\", \"Accountant\", \"Nurse\", \"Manager\",\n    \"Sales Representative\", \"Software Developer\", \"Architect\", \"Chef\", \"Artist\",\n    \"Musician\", \"Writer\", \"Photographer\", \"Designer\", \"Consultant\", \"Analyst\",",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "OCCUPATIONS",
        "kind": 5,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "OCCUPATIONS = [\n    \"Doctor\", \"Engineer\", \"Teacher\", \"Lawyer\", \"Accountant\", \"Nurse\", \"Manager\",\n    \"Sales Representative\", \"Software Developer\", \"Architect\", \"Chef\", \"Artist\",\n    \"Musician\", \"Writer\", \"Photographer\", \"Designer\", \"Consultant\", \"Analyst\",\n    \"Administrator\", \"Technician\", \"Student\", \"Retired\", \"Unemployed\", \"Business Owner\"\n]\nEDUCATION_LEVELS = [\n    \"illiterate\", \"read_write\", \"primary\", \"preparatory\", \"secondary\", \"university\", \"postgraduate\"\n]\nMARITAL_STATUSES = [\"married\", \"single\", \"divorced\", \"widowed\"]",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "EDUCATION_LEVELS",
        "kind": 5,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "EDUCATION_LEVELS = [\n    \"illiterate\", \"read_write\", \"primary\", \"preparatory\", \"secondary\", \"university\", \"postgraduate\"\n]\nMARITAL_STATUSES = [\"married\", \"single\", \"divorced\", \"widowed\"]\nGENDERS = [\"male\", \"female\"]\nPATIENT_TYPES = [\"adult\", \"pediatric\"]\nCONTRACEPTION_METHODS = [\"implant\", \"iud\", \"coc\", \"other\"]\nMENSTRUATION_CHOICES = [\"regular\", \"irregular\", \"menopause\"]\nBLOOD_TRANSFUSION_CHOICES = [\"no\", \"occasional\", \"regular\"]\nSURGICAL_CHOICES = [\"icu\", \"operation\"]",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "MARITAL_STATUSES",
        "kind": 5,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "MARITAL_STATUSES = [\"married\", \"single\", \"divorced\", \"widowed\"]\nGENDERS = [\"male\", \"female\"]\nPATIENT_TYPES = [\"adult\", \"pediatric\"]\nCONTRACEPTION_METHODS = [\"implant\", \"iud\", \"coc\", \"other\"]\nMENSTRUATION_CHOICES = [\"regular\", \"irregular\", \"menopause\"]\nBLOOD_TRANSFUSION_CHOICES = [\"no\", \"occasional\", \"regular\"]\nSURGICAL_CHOICES = [\"icu\", \"operation\"]\ndef generate_phone_number() -> str:\n    \"\"\"Generate a random Egyptian phone number\"\"\"\n    prefixes = [\"010\", \"011\", \"012\", \"015\"]",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "GENDERS",
        "kind": 5,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "GENDERS = [\"male\", \"female\"]\nPATIENT_TYPES = [\"adult\", \"pediatric\"]\nCONTRACEPTION_METHODS = [\"implant\", \"iud\", \"coc\", \"other\"]\nMENSTRUATION_CHOICES = [\"regular\", \"irregular\", \"menopause\"]\nBLOOD_TRANSFUSION_CHOICES = [\"no\", \"occasional\", \"regular\"]\nSURGICAL_CHOICES = [\"icu\", \"operation\"]\ndef generate_phone_number() -> str:\n    \"\"\"Generate a random Egyptian phone number\"\"\"\n    prefixes = [\"010\", \"011\", \"012\", \"015\"]\n    prefix = random.choice(prefixes)",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "PATIENT_TYPES",
        "kind": 5,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "PATIENT_TYPES = [\"adult\", \"pediatric\"]\nCONTRACEPTION_METHODS = [\"implant\", \"iud\", \"coc\", \"other\"]\nMENSTRUATION_CHOICES = [\"regular\", \"irregular\", \"menopause\"]\nBLOOD_TRANSFUSION_CHOICES = [\"no\", \"occasional\", \"regular\"]\nSURGICAL_CHOICES = [\"icu\", \"operation\"]\ndef generate_phone_number() -> str:\n    \"\"\"Generate a random Egyptian phone number\"\"\"\n    prefixes = [\"010\", \"011\", \"012\", \"015\"]\n    prefix = random.choice(prefixes)\n    number = ''.join([str(random.randint(0, 9)) for _ in range(8)])",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "CONTRACEPTION_METHODS",
        "kind": 5,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "CONTRACEPTION_METHODS = [\"implant\", \"iud\", \"coc\", \"other\"]\nMENSTRUATION_CHOICES = [\"regular\", \"irregular\", \"menopause\"]\nBLOOD_TRANSFUSION_CHOICES = [\"no\", \"occasional\", \"regular\"]\nSURGICAL_CHOICES = [\"icu\", \"operation\"]\ndef generate_phone_number() -> str:\n    \"\"\"Generate a random Egyptian phone number\"\"\"\n    prefixes = [\"010\", \"011\", \"012\", \"015\"]\n    prefix = random.choice(prefixes)\n    number = ''.join([str(random.randint(0, 9)) for _ in range(8)])\n    return f\"{prefix}{number}\"",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "MENSTRUATION_CHOICES",
        "kind": 5,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "MENSTRUATION_CHOICES = [\"regular\", \"irregular\", \"menopause\"]\nBLOOD_TRANSFUSION_CHOICES = [\"no\", \"occasional\", \"regular\"]\nSURGICAL_CHOICES = [\"icu\", \"operation\"]\ndef generate_phone_number() -> str:\n    \"\"\"Generate a random Egyptian phone number\"\"\"\n    prefixes = [\"010\", \"011\", \"012\", \"015\"]\n    prefix = random.choice(prefixes)\n    number = ''.join([str(random.randint(0, 9)) for _ in range(8)])\n    return f\"{prefix}{number}\"\ndef generate_patient_code() -> str:",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "BLOOD_TRANSFUSION_CHOICES",
        "kind": 5,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "BLOOD_TRANSFUSION_CHOICES = [\"no\", \"occasional\", \"regular\"]\nSURGICAL_CHOICES = [\"icu\", \"operation\"]\ndef generate_phone_number() -> str:\n    \"\"\"Generate a random Egyptian phone number\"\"\"\n    prefixes = [\"010\", \"011\", \"012\", \"015\"]\n    prefix = random.choice(prefixes)\n    number = ''.join([str(random.randint(0, 9)) for _ in range(8)])\n    return f\"{prefix}{number}\"\ndef generate_patient_code() -> str:\n    \"\"\"Generate a unique patient code\"\"\"",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "SURGICAL_CHOICES",
        "kind": 5,
        "importPath": "backend.scripts.create_random_patients",
        "description": "backend.scripts.create_random_patients",
        "peekOfCode": "SURGICAL_CHOICES = [\"icu\", \"operation\"]\ndef generate_phone_number() -> str:\n    \"\"\"Generate a random Egyptian phone number\"\"\"\n    prefixes = [\"010\", \"011\", \"012\", \"015\"]\n    prefix = random.choice(prefixes)\n    number = ''.join([str(random.randint(0, 9)) for _ in range(8)])\n    return f\"{prefix}{number}\"\ndef generate_patient_code() -> str:\n    \"\"\"Generate a unique patient code\"\"\"\n    return f\"PAT{random.randint(10000, 99999)}\"",
        "detail": "backend.scripts.create_random_patients",
        "documentation": {}
    },
    {
        "label": "create_quick_patients",
        "kind": 2,
        "importPath": "backend.scripts.quick_create_patients",
        "description": "backend.scripts.quick_create_patients",
        "peekOfCode": "def create_quick_patients():\n    \"\"\"Create 5 random patients quickly\"\"\"\n    # Sample data\n    names = [\"Ahmed Ali\", \"Fatima Hassan\", \"Mohamed Omar\", \"Aisha Youssef\", \"Omar Mahmoud\"]\n    genders = [\"male\", \"female\"]\n    occupations = [\"Doctor\", \"Engineer\", \"Teacher\", \"Nurse\", \"Manager\"]\n    patients_created = 0\n    for i, name in enumerate(names):\n        patient_data = {\n            \"patient_type\": \"adult\",",
        "detail": "backend.scripts.quick_create_patients",
        "documentation": {}
    },
    {
        "label": "API_BASE_URL",
        "kind": 5,
        "importPath": "backend.scripts.quick_create_patients",
        "description": "backend.scripts.quick_create_patients",
        "peekOfCode": "API_BASE_URL = \"http://localhost:8000/api\"\nPATIENTS_ENDPOINT = f\"{API_BASE_URL}/patients/patients/\"\ndef create_quick_patients():\n    \"\"\"Create 5 random patients quickly\"\"\"\n    # Sample data\n    names = [\"Ahmed Ali\", \"Fatima Hassan\", \"Mohamed Omar\", \"Aisha Youssef\", \"Omar Mahmoud\"]\n    genders = [\"male\", \"female\"]\n    occupations = [\"Doctor\", \"Engineer\", \"Teacher\", \"Nurse\", \"Manager\"]\n    patients_created = 0\n    for i, name in enumerate(names):",
        "detail": "backend.scripts.quick_create_patients",
        "documentation": {}
    },
    {
        "label": "PATIENTS_ENDPOINT",
        "kind": 5,
        "importPath": "backend.scripts.quick_create_patients",
        "description": "backend.scripts.quick_create_patients",
        "peekOfCode": "PATIENTS_ENDPOINT = f\"{API_BASE_URL}/patients/patients/\"\ndef create_quick_patients():\n    \"\"\"Create 5 random patients quickly\"\"\"\n    # Sample data\n    names = [\"Ahmed Ali\", \"Fatima Hassan\", \"Mohamed Omar\", \"Aisha Youssef\", \"Omar Mahmoud\"]\n    genders = [\"male\", \"female\"]\n    occupations = [\"Doctor\", \"Engineer\", \"Teacher\", \"Nurse\", \"Manager\"]\n    patients_created = 0\n    for i, name in enumerate(names):\n        patient_data = {",
        "detail": "backend.scripts.quick_create_patients",
        "documentation": {}
    },
    {
        "label": "PatientAPITest",
        "kind": 6,
        "importPath": "backend.tests.integration.test_patients_api",
        "description": "backend.tests.integration.test_patients_api",
        "peekOfCode": "class PatientAPITest(APITestCase):\n    \"\"\"Integration tests for Patient API endpoints\"\"\"\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        self.patient_data = {\n            'patient_type': 'adult',\n            'code': 'API001',\n            'house_number': '123',\n            'name': 'API Patient',\n            'gender': 'male',",
        "detail": "backend.tests.integration.test_patients_api",
        "documentation": {}
    },
    {
        "label": "AdultAPITest",
        "kind": 6,
        "importPath": "backend.tests.integration.test_patients_api",
        "description": "backend.tests.integration.test_patients_api",
        "peekOfCode": "class AdultAPITest(APITestCase):\n    \"\"\"Integration tests for Adult API endpoints\"\"\"\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        self.adult_data = {\n            'patient_type': 'adult',\n            'code': 'ADULT001',\n            'house_number': '456',\n            'name': 'Adult API',\n            'gender': 'female',",
        "detail": "backend.tests.integration.test_patients_api",
        "documentation": {}
    },
    {
        "label": "PatientModelTest",
        "kind": 6,
        "importPath": "backend.tests.unit.test_patients_models",
        "description": "backend.tests.unit.test_patients_models",
        "peekOfCode": "class PatientModelTest(TestCase):\n    \"\"\"Test cases for Patient model\"\"\"\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        self.patient_data = {\n            'patient_type': 'adult',\n            'code': 'TEST001',\n            'house_number': '123',\n            'name': 'John Doe',\n            'gender': 'male',",
        "detail": "backend.tests.unit.test_patients_models",
        "documentation": {}
    },
    {
        "label": "AdultModelTest",
        "kind": 6,
        "importPath": "backend.tests.unit.test_patients_models",
        "description": "backend.tests.unit.test_patients_models",
        "peekOfCode": "class AdultModelTest(TestCase):\n    \"\"\"Test cases for Adult model\"\"\"\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        self.adult_data = {\n            'patient_type': 'adult',\n            'code': 'ADULT001',\n            'house_number': '456',\n            'name': 'Adult Patient',\n            'gender': 'female',",
        "detail": "backend.tests.unit.test_patients_models",
        "documentation": {}
    },
    {
        "label": "PatientSerializerTest",
        "kind": 6,
        "importPath": "backend.tests.unit.test_patients_serializers",
        "description": "backend.tests.unit.test_patients_serializers",
        "peekOfCode": "class PatientSerializerTest(TestCase):\n    \"\"\"Test cases for PatientSerializer\"\"\"\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        self.valid_data = {\n            'patient_type': 'adult',\n            'code': 'SERIAL001',\n            'house_number': '123',\n            'name': 'Serial Patient',\n            'gender': 'male',",
        "detail": "backend.tests.unit.test_patients_serializers",
        "documentation": {}
    },
    {
        "label": "AdultSerializerTest",
        "kind": 6,
        "importPath": "backend.tests.unit.test_patients_serializers",
        "description": "backend.tests.unit.test_patients_serializers",
        "peekOfCode": "class AdultSerializerTest(TestCase):\n    \"\"\"Test cases for AdultSerializer\"\"\"\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        self.valid_data = {\n            'patient_type': 'adult',\n            'code': 'ADULT001',\n            'house_number': '456',\n            'name': 'Adult Serial',\n            'gender': 'female',",
        "detail": "backend.tests.unit.test_patients_serializers",
        "documentation": {}
    },
    {
        "label": "django_db_setup",
        "kind": 2,
        "importPath": "backend.tests.conftest",
        "description": "backend.tests.conftest",
        "peekOfCode": "def django_db_setup(django_db_setup, django_db_blocker):\n    \"\"\"Set up database for testing\"\"\"\n    with django_db_blocker.unblock():\n        # Run migrations for test database\n        from django.core.management import execute_from_command_line\n        execute_from_command_line(['manage.py', 'migrate', '--run-syncdb'])\n@pytest.fixture\ndef sample_patient_data():\n    \"\"\"Sample patient data for testing\"\"\"\n    return {",
        "detail": "backend.tests.conftest",
        "documentation": {}
    },
    {
        "label": "sample_patient_data",
        "kind": 2,
        "importPath": "backend.tests.conftest",
        "description": "backend.tests.conftest",
        "peekOfCode": "def sample_patient_data():\n    \"\"\"Sample patient data for testing\"\"\"\n    return {\n        'patient_type': 'adult',\n        'code': 'TEST001',\n        'house_number': '123',\n        'name': 'Test Patient',\n        'gender': 'male',\n        'mobile_number': '01234567890'\n    }",
        "detail": "backend.tests.conftest",
        "documentation": {}
    },
    {
        "label": "sample_adult_data",
        "kind": 2,
        "importPath": "backend.tests.conftest",
        "description": "backend.tests.conftest",
        "peekOfCode": "def sample_adult_data():\n    \"\"\"Sample adult data for testing\"\"\"\n    return {\n        'patient_type': 'adult',\n        'code': 'ADULT001',\n        'house_number': '456',\n        'name': 'Test Adult',\n        'gender': 'female',\n        'mobile_number': '09876543210',\n        'occupation': 'Engineer',",
        "detail": "backend.tests.conftest",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.manage",
        "description": "backend.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"bedaya_medical_system.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "backend.manage",
        "documentation": {}
    },
    {
        "label": "delete_files",
        "kind": 2,
        "importPath": "backend.rm_cache",
        "description": "backend.rm_cache",
        "peekOfCode": "def delete_files(base_dir):\n    # Regular expression to match filenames that start with four digits\n    digit_pattern = re.compile(r'^\\d{4}')\n    # Delete sqllite3\n    db_path = os.path.join(base_dir, 'db.sqlite3')\n    if os.path.exists(db_path):\n        os.remove(db_path)\n        print(f\"Deleted: {db_path}\")\n    else:\n        print(f\"Database file not found: {db_path}\")",
        "detail": "backend.rm_cache",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    }
]